/*
Standard Polar Geometry Shader
 */

#version 410 core

in vec2 radial_vertex[];
in vec2 angle_vertex[];
in vec4 color_vertex[];
out vec4 color_geom;
out vec2 radial_geom;
out vec2 angle_geom;
out vec2 emit_vertex; // For Giving the Screen Position to the Fragments

uniform float aspect_ratio;

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

void main() {

  color_geom = color_vertex[0];
  radial_geom = radial_vertex[0];
  angle_geom = angle_vertex[0];

  if (angle_vertex[0].y - angle_vertex[0].x <= 0.25)
    {
      float angle_first = radians(angle_vertex[0].x * 360);
      float angle_second = radians(angle_vertex[0].y * 360);
      float angle_diff = (angle_first - angle_second) / 2.0f;
      float radial_large = radial_vertex[0].y / cos(angle_diff);
      float radial_small = radial_vertex[0].x;
      gl_Position = vec4(radial_large * vec2(cos(angle_first), sin(angle_first)), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_small * vec2(cos(angle_first), sin(angle_first)), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_large * vec2(cos(angle_second), sin(angle_second)), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_small * vec2(cos(angle_second), sin(angle_second)), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
    }
  else
    {
      float radial_large = radial_vertex[0].y;
      float radial_small = radial_vertex[0].x;
      gl_Position = vec4(radial_large * vec2(-1.0f, -1.0f), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_large * vec2(-1.0f, 1.0f), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_large * vec2(1.0f,- 1.0f), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
      gl_Position = vec4(radial_large * vec2(1.0f, 1.0f), 0.0f, 1.0f);
      gl_Position.x = gl_Position.x / aspect_ratio;
      emit_vertex = gl_Position.xy;
      EmitVertex();
    }

    EndPrimitive();
}
